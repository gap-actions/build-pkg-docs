name: "Compile GAP package documentation"
description: "Compile documentation with or without latex"
inputs:
  use-latex:
    description: "if true, then install and use latex"
    required: false
    default: "false"
  warnings-as-errors:
    description: "If set to true then any errors produced whilst building the documentation will be treated as errors"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: "Install TeX Live"
      if: ${{ inputs.use-latex == 'true' }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended
    - name: "Setup GAP root"
      shell: bash
      run: |
        # set up a custom GAP root containing only this package, so that
        # we can force GAP to load the correct version of this package
        # (we already did that in build_pkg.sh, but we do it again here,
        # to allow the occasional instance where a package wants to also
        # run the tests of others packages, by invoking this script multiple
        # times in different directories)
        mkdir -p /tmp/gaproot/pkg/
        ln -f -s $PWD /tmp/gaproot/pkg/

        # start GAP with custom GAP root, to ensure correct package version is loaded
        GAPROOT=${GAPROOT-$HOME/gap}
        echo "GAP=$GAPROOT/gap -l /tmp/gaproot; --quitonbreak" >> "$GITHUB_ENV"
        echo "GAPROOT=$GAPROOT" >> "$GITHUB_ENV"
    - name: "Check for GAP manual"
      shell: bash
      run: |
        cd $GAPROOT/doc/ref
        if [ ! -f manual.six ]; then
          cd $GAPROOT
          make html || :
          # build a HTML version of the GAP reference manual to allow subsequent 
          # steps to pass when building a package manual that contains refs to
          # the GAP reference manual.
          # There is a caveat, though: building the GAP reference manual in turn
          # can fail if it contains undefined references; this can happen because
          # the GAP manual contains references to several packages and we don't
          # install a full package distribution when running tests.
          # See also <https://github.com/gap-actions/build-pkg-docs/issues/22>.
        fi
    - name: "Compile documentation"
      shell: bash
      run: |
        if [ -f "makedoc.g" ]; then
          $GAP makedoc.g -c "QUIT;" 2>&1 | tee output.log
        elif [ -x "doc/make_doc" ]; then
          # If the package is called <pkg_name>, then the <doc/make_doc> script
          # most likely assumes that it has been called from the within the
          # <pkg_name>/doc folder, and that the directory hierarchy is
          # <gaproot>/pkg/<pkg_name>/doc/make_doc, and relies on this to access
          # several file.
          # So we create symlinks to some potentially-useful GAP directories.
          [ -d ../../doc ] && echo "../../doc exists" || ln -s $GAPROOT/doc ../../doc
          [ -d ../../etc ] && echo "../../etc exists" || ln -s $GAPROOT/etc ../../etc
          cd doc && ./make_doc  2>&1 | tee output.log
        elif [ -f "doc/make_doc" ]; then
          echo "doc/make_doc exists but is not executable!"
          exit 1
        else
          echo "no makedoc.g file or doc/make_doc script found!"
          exit 1
        fi
      env:
        SOURCE_DATE_EPOCH: 0 # prevent time stamps in generated PDF
    - name: "Check for warnings"
      if: ${{ inputs.warnings-as-errors == 'true' }}
      shell: bash
      # The below checks for warnings produced whilst the docs were being built,
      # apart from the warning LaTeX produces when labels may have changed.
      # As discussed in https://github.com/BNasmith/alco/issues/24, the LaTeX
      # label warnings are sometimes false positives. Moreover, GAPDoc can
      # identify this issues, hence we ignore the ones from LaTeX.
      run: |
        if grep -i -e "warning\b" output.log | grep -qiv "LaTeX Warning: Label(s) may have changed."; then
          echo "Warnings were found when building the documentation!"
          grep -i -e "warning\b" output.log
          exit 1
        fi
    - name: "Check documentation is compiled"
      shell: bash
      run: |
        cat > __DOC_CHECKER__.g <<EOF

        Read("PackageInfo.g");
        doc_infos := GAPInfo.PackageInfoCurrent.PackageDoc;
        filenames := [ "HTMLStart", "SixFile" ${{ inputs.use-latex == 'true' && ', "PDFFile"' || ''  }}];

        if IsRecord(doc_infos) then
          doc_infos := [doc_infos];
        fi;

        for doc_info in doc_infos do
          for filename in filenames do
            if not IsExistingFile( doc_info.(filename) ) then
              Error(
                Concatenation(
                  "The documentation has supposedly been built, but the file ",
                  doc_info.(filename),
                  " specified in PackageDoc.",
                  filename,
                  " does not exist."
                )
              );
            fi;
          od;
        od;

        EOF
        $GAP __DOC_CHECKER__.g -c "QUIT;"
